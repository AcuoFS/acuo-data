LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/AcuoFS/acuo-data/master/CSV/margincall/info2.csv' 
AS line

// This is a partial dispute node. We still check for safety's sake. 

MATCH (pmc {id:line.CallId})-[:DIRECTED_TO]->(c:Client)

WITH line, pmc, c,
		CASE WHEN (line.NewStatus = 'PartialDispute') THEN [1] ELSE []
		END
	AS partdispute

// If exception ? (Correct ? Tell the client/MarginSphere ?)

FOREACH (i IN partdispute | 
	MERGE (pmc)<-[:CHILD_OF {time:line.Time}]-(cmca:MarginCall {id:line.AgreedCallId, 
                                                                    receivedCallAmount:toFloat(line.AgreedAmount), 
                                                                    receivedMarkToMarketClient:toFloat(line.MarkToMarket),
                                                                    receivedCollateralBalanceClient:toFloat(line.CollateralBalance),
                                                                    disputeReasonCode:line.DisputeReasonCode, 
                                                                    parentRank:pmc.parentRank+1
	})-[:DIRECTED_TO]->(c) 

	MERGE (pmc)<-[:CHILD_OF {time:line.Time}]-(cmcr:MarginCall {id:line.DisputeCallId, 
                                                                    receivedCallAmount:pmc.receivedCallAmount-toFloat(line.AgreedAmount),
                                                                    receivedMarkToMarketClient:toFloat(line.MarkToMarket),
                                                                    receivedCollateralBalanceClient:toFloat(line.CollateralBalance),
                                                                    disputeReasonCode:line.DisputeReasonCode, 
                                                                    parentRank:pmc.parentRank+1
	})-[:DIRECTED_TO]->(c)
)

// Back to the general background: creating the node and a LAST relationship

WITH line, pmc

MERGE (pmc)-[:LAST {time:line.Time}]->(n:Step {step:line.NewStatus})

WITH pmc, n, line,
		CASE WHEN NOT ((pmc)-[:FIRST]->()) THEN [1] ELSE []
		END
	AS firstnode

FOREACH (i IN firstnode | MERGE (pmc)-[:FIRST {time:line.Time}]->(n))

WITH pmc, n, line

// We delete the previous [:LAST] relationship and add a [:NEXT] relationship

OPTIONAL MATCH (n)<-[:LAST]-(pmc)-[delRel:LAST]->(m {step:line.PrevStatus})
FOREACH(y IN CASE WHEN m IS NOT NULL THEN [1] ELSE [] END | DELETE delRel MERGE (m)-[:NEXT {time:line.Time}]->(n))

