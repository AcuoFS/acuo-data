LOAD CSV WITH HEADERS FROM '%dataImportLink%/csv/custodianAssets.csv' 
AS line 

MATCH (custac:CustodianAccount {id:line.accountId})

MERGE (custac)-[h:HOLDS {businessTimeFrom:line.businessTimeFrom, businessTimeTo:line.businessTimeTo}]->(a:Asset {id: line.assetId,idType: line.idType, name:line.name,
	currency:line.currency,	yield: TOFLOAT(line.yield),type:line.type,ICADCode:line.ICADCode,ACUOCategory:line.ACUOCategory,
	price:TOFLOAT(line.price),parValue:TOFLOAT(line.parValue),minUnit:TOFLOAT(line.minUnit),minUnitValue:TOFLOAT(line.minUnitValue)})

ON CREATE SET
h.availableQuantity=TOFLOAT(line.availableQuantity),
//	h.deployedQuantity=TOFLOAT(line.deployedQuantity),
//	h.departingQuantity=TOFLOAT(line.departingQuantity),
//	h.arrivingQuantity =TOFLOAT(line.arrivingQuantity),
h.reservedQuantity=TOFLOAT(line.reservedQuantity),
h.internalCost=TOFLOAT(line.internalCost),
h.opptCost=TOFLOAT(line.opptCost)

ON MATCH SET
h.availableQuantity=TOFLOAT(line.availableQuantity),
//	h.deployedQuantity=TOFLOAT(line.deployedQuantity),
//	h.departedQuantity=TOFLOAT(line.departedQuantity),
//	h.arrivingQuantity =TOFLOAT(line.arrivingQuantity),
h.reservedQuantity=TOFLOAT(line.reservedQuantity),
h.internalCost=TOFLOAT(line.internalCost),
h.opptCost=TOFLOAT(line.opptCost)

WITH line,a,custac, timestamp()/1000/60/60/24 AS todayDays

FOREACH (i IN CASE 	WHEN trim(line.ISIN)<>"" THEN [1] 
	ELSE [] END | SET a.ISIN=line.ISIN)
FOREACH (i IN CASE 	WHEN trim(line.ticker)<>"" THEN [1] 
	ELSE [] END | SET a.ticker=line.ticker)
FOREACH (i IN CASE 	WHEN trim(line.issueDate)<>"" AND trim(line.maturityDate)<>"" THEN [1] 
	ELSE [] END | SET a.issueDate=line.issueDate, a.maturityDate=line.maturityDate)
FOREACH (i IN CASE 	WHEN trim(line.fitchRating)<>"" THEN [1] 
	ELSE [] END | SET a.rating=line.fitchRating)

WITH a,custac,todayDays, TOINT(line.futureDays) AS futureDays
SET a.timeToMaturityDays = CASE WHEN futureDays>todayDays THEN TOFLOAT(futureDays-todayDays)
                                ELSE 0 END,
    a.timeToMaturityYears = TOFLOAT(a.timeToMaturityDays/365)

WITH custac,a
MATCH (security:Asset {id:a.id})

WITH custac, a, security
MATCH (fr:FitchRating {rating:security.rating})
WHERE NOT security.rating IS NULL
SET security.ratingScore= fr.score

WITH custac,a

MATCH (a)<--(custac)<-[:HAS]-(c:Client)-[:MANAGES]->(e)-[:CLIENT_SIGNS]->(ag:Agreement)<-[:IS_ELIGIBLE_UNDER]-(ac:AssetCategory)
WHERE a.ICADCode=ac.name
AND a.currency=ac.currency

FOREACH (i IN CASE 
	WHEN a.ticker=ac.ticker THEN 1
	WHEN UPPER(a.type)='CASH' THEN 1
	WHEN UPPER(a.type)='GOLD' THEN 1
	WHEN a.timeToMaturityYears<=ac.maturityUp AND  a.timeToMaturityYears>ac.maturityLb THEN 1
	WHEN a.ratingScore<= ac.ratingScoreUp AND a.ratingScore>= ac.ratingScoreLb THEN 1
	ELSE [] END | MERGE (a)-[:IS_IN]->(ac))

WITH DISTINCT a, custac

MATCH (custac)-[:HOLDS]->(a)-[:IS_IN]->(ac)-[ie:IS_ELIGIBLE_UNDER]->(ag:Agreement)<-[:CLIENT_SIGNS]-(e:LegalEntity)-[:HAS]->(acc:TradingAccount)
WHERE (acc)-[:ACCESSES]->(custac)
MERGE (a)-[:IS_AVAILABLE_FOR {haircut:ie.haircut,FXHaircut:ie.FXHaircut,interestRate:ie.interestRate,
	externalCost:ie.externalCost,FXRate: ie.FXRate, marginType:ie.marginType}]-(ag)

