LOAD CSV WITH HEADERS FROM '%dataImportLink%/csv/initialmc.csv' AS line

MATCH (a:Agreement {id:line.AgreementId})
MATCH (c:Client)-[:MANAGES]->(e:LegalEntity)-[s:CLIENT_SIGNS]->(a)<-[:COUNTERPARTY_SIGNS]-(ce)
MATCH (ms:MarginStatement {id:line.StatementId})

MERGE (mc:MarginCall {id:line.CallId, 
                    callDate:line.CallDate,
                    callType:line.CallType,
                    direction:line.Direction})

WITH *

MERGE (mc)-[:FIRST]->(step:Step {status:line.Status})
MERGE (mc)-[:LAST]->(step)

WITH *

SET mc.id=line.CallId,
    mc.valuationDate=line.ValuationDate,
    mc.currency=line.Currency,
    mc.excessAmount=toFloat(line.TotalCallAmount),
    mc.balanceAmount=toFloat(line.CollateralValue),
    mc.deliverAmount=toFloat(line.DeliverAmount),
    mc.returnAmount=toFloat(line.ReturnAmount),
    mc.pendingCollateral=toFloat(line.PendingCollateral),
    mc.exposure=toFloat(line.Exposure),
    mc.IMRole=line.IMRole,
    mc.parentRank=1,
    mc.status=line.Status

MERGE (mc)-[:PART_OF]->(ms)
MERGE (mc)-[:STEMS_FROM]->(a)

WITH *, CASE WHEN line.Direction = 'IN' THEN [1] ELSE [] END as inbound
FOREACH (i in inbound | MERGE (mc)-[:DIRECTED_TO]->(e) MERGE (mc)-[:SENT_FROM]->(ce))

WITH *, CASE WHEN line.Direction = 'OUT' THEN [1] ELSE [] END as outbound
FOREACH (i in outbound | MERGE (mc)-[:DIRECTED_TO]->(ce) MERGE (mc)-[:SENT_FROM]->(e))

WITH *,
		CASE WHEN exists((:MarginCall {callDate:line.CallDate, callType:line.CallType, status:'Expected'})-[:PART_OF]->(ms)) THEN [1] ELSE []
		END
	as existsExpected

FOREACH (i in existsExpected | MERGE (mce:MarginCall {callDate:line.CallDate, callType:line.CallType, status:'Expected'})-[:PART_OF]->(ms)
MERGE (mc)-[:MATCHED_TO_EXPECTED]->(mce))

WITH *

MATCH (mc)-[:STEMS_FROM]->(a:Agreement)
SET mc.notificationTime = mc.callDate + ' ' + a.notificationTime

WITH *

WHERE NOT a.type = 'cleared'
SET mc.roundedReturnAmount=floor(toFloat(line.ReturnAmount)/s.rounding)*s.rounding, mc.roundedDeliverAmount=ceil(toFloat(line.DeliverAmount)/s.rounding)*s.rounding, mc.belowMTA=0

WITH *

WHERE mc.totalCallAmount < s.MTA
SET mc.belowMTA=1
