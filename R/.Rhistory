print(cypher(graph, query2))
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
#  load.name <- c(load.name, ('/notificationtime.load'))
load.constr <- c('constraint/account.load',
'constraint/agreement.load',
'constraint/asset.load',
'constraint/client.load',
'constraint/legalentity.load',
'constraint/margincall.load',
'constraint/trade.load')
load.name = c(load.constr, load.name)
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master/load'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
query1 = "WITH timestamp()/1000/60/60 AS now
MATCH (a:Agreement)<-[:STEMS_FROM]-(m:MarginCall {callType:'Variation'})
WITH *, m.callDate + ' ' + a.notificationTime as rawUnadjustedTime
CALL apoc.date.parse(rawUnadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedTime
WITH *
WHERE 0 <= unadjustedTime-now <= 24
RETURN unadjustedTime, now
//CALL apoc.date.format(unadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedFormatedTime
//SET m.notificationTime = unadjustedFormatedTime"
print(cypher(graph, query1))
query2 = "MATCH (m:MarginCall) RETURN m.notificationTime"
print(cypher(graph, query2))
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
#  load.name <- c(load.name, ('/notificationtime.load'))
load.constr <- c('constraint/account.load',
'constraint/agreement.load',
'constraint/asset.load',
'constraint/client.load',
'constraint/legalentity.load',
'constraint/margincall.load',
'constraint/trade.load')
load.name = c(load.constr, load.name)
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master/load'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
query1 = "WITH timestamp()/1000/60/60 AS now
MATCH (a:Agreement)<-[:STEMS_FROM]-(m:MarginCall {callType:'Variation'})
WITH *, m.callDate + ' ' + a.notificationTime as rawUnadjustedTime
CALL apoc.date.parse(rawUnadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedTime
WITH *
WHERE 0 <= unadjustedTime-now <= 24
RETURN unadjustedTime, now
//CALL apoc.date.format(unadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedFormatedTime
//SET m.notificationTime = unadjustedFormatedTime"
print(cypher(graph, query1))
query2 = "MATCH (m:MarginCall) RETURN m.notificationTime"
print(cypher(graph, query2))
query1 = "WITH timestamp()/1000/60/60 AS now
MATCH (a:Agreement)<-[:STEMS_FROM]-(m:MarginCall {callType:'Variation'})
WITH *, m.callDate + ' ' + a.notificationTime as rawUnadjustedTime
CALL apoc.date.parse(rawUnadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedTime
WITH *
WHERE 0 <= unadjustedTime-now <= 24
CALL apoc.date.format(unadjustedTime, 'h', 'dd/MM/yy HH:mm') YIELD value as unadjustedFormatedTime
SET m.notificationTime = unadjustedFormatedTime"
print(cypher(graph, query1))
query2 = "MATCH (m:MarginCall) RETURN m.notificationTime"
print(cypher(graph, query2))
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
load.name <- c(load.name, ('/notificationtime.load'))
load.constr <- c('constraint/account.load',
'constraint/agreement.load',
'constraint/asset.load',
'constraint/client.load',
'constraint/legalentity.load',
'constraint/margincall.load',
'constraint/trade.load')
load.name = c(load.constr, load.name)
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master/load'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
query = "MATCH (m:MarginCall) RETURN m.notificationTime"
print(cypher(graph, query))
library('RNeo4j')
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
#  for (i in 1:5) {
#    load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
#  }
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
#  load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
#                 '/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
#  load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
print('hihi')
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
print('haha')
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
#                 '/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
for (i in 1:10) {
load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
}
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
#  load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
#  for (i in 1:10) {
#    load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
#  }
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
#  load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
library('RNeo4j')
buildDataBase = function() {
readload <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
#  graph = startGraph("http://neo4j:7474/db/data")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/client.load',
'/legalentity.load',
'/account.load',
'/agreement.load',
'/recipientInfo.load',
'/cds.load',
'/irsvanilla.load',
'/irsfloatfloat.load',
'/ndf.load',
'/fxsi.load',
'/fxsw.load',
'/optionsvanilla.load',
'/optionsbarrier.load',
'/fra.load',
'/zcs.load',
'/swaption.load',
'/assetCategory.load',
'/assetInventory.load',
'/custodian.load',
'/custodianAccount.load',
'/custodianAsset.load',
'/margincall/initmc.load')
#  for (i in 1:10) {
#    load.name <- c(load.name, paste('/margincall/info', toString(i), '.load', sep=''))
#  }
load.constr <- c('/loadconstraint/account.load',
'/loadconstraint/agreement.load',
'/loadconstraint/asset.load',
'/loadconstraint/client.load',
'/loadconstraint/legalentity.load',
'/loadconstraint/custodian.load',
'/loadconstraint/custodianAccount.load',
'/loadconstraint/margincall.load',
'/loadconstraint/trade.load')
#  load.name <- c(load.constr,paste('/load',load.name,sep=""), ('/notificationtime.load'))
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/master'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)){
load.query[i] <- readload(load.url[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph = buildDataBase()
